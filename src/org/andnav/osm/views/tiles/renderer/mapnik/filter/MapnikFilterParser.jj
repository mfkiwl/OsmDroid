/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(MapnikFilterParser)
package org.andnav.osm.views.tiles.renderer.mapnik.filter;

import java.util.Stack;
import java.io.ByteArrayInputStream;
import org.andnav.osm.views.tiles.renderer.mapnik.filter.compare.*;
import org.andnav.osm.views.tiles.renderer.mapnik.filter.maths.*;
import org.andnav.osm.views.tiles.renderer.mapnik.MapnikParameterIntValue;
import org.andnav.osm.views.tiles.renderer.mapnik.MapnikParameterDoubleValue;
import org.andnav.osm.views.tiles.renderer.mapnik.MapnikParameterStringValue;
import android.util.Log;

public class MapnikFilterParser {
	
	private static final String TAG = "MapnikFilterParser";
	private static Stack<MapnikFilter> mFilters;
	private static Stack<MapnikFilterExpression> mExpressions;

	public static synchronized void compile(Stack<MapnikFilter> filters, Stack<MapnikFilterExpression> expressions, String filterText) throws Exception {
		MapnikFilterParser.mFilters = filters;
		MapnikFilterParser.mExpressions = expressions;

		MapnikFilterParser parser = new MapnikFilterParser(new ByteArrayInputStream(filterText.getBytes()));

		try {
			parser.one_line();
		}
		catch (Exception e)
		{
			Log.e(TAG, "Parsing Failed: " + e.toString() + e.getMessage());
			throw e;
		}
	}

	public static void composeOrFilter(Stack<MapnikFilter> filters)
	{
		if (filters.size() >= 2)
		{
			MapnikFilter right = filters.pop();
			MapnikFilter left  = filters.pop();
			if (left != null && right != null)
				filters.push(new MapnikFilterLogicalOr(left, right));
		}
	}

	public static void composeAndFilter(Stack<MapnikFilter> filters)
	{
		if (filters.size() >= 2)
		{
			MapnikFilter right = filters.pop();
			MapnikFilter left  = filters.pop();
			if (left != null && right != null)
				filters.push(new MapnikFilterLogicalAnd(left, right));
		}
	}

	public static void composeNotFilter(Stack<MapnikFilter> filters)
	{
		if (filters.size() >= 1)
		{
			MapnikFilter filter  = filters.pop();
			if (filter != null)
				filters.push(new MapnikFilterLogicalNot(filter));
		}
	}

	public static void composeFilter(Stack<MapnikFilter> filters, Stack<MapnikFilterExpression> expressions, MapnikFilterCompareOp op)
	{
		if (expressions.size()>=2)
		{
			MapnikFilterExpression right = expressions.pop();
			MapnikFilterExpression left  = expressions.pop();

			if (left != null && right != null)
				filters.push(new MapnikFilterCompare(left, right, op));
		}
	}

	public static void composeExpression(Stack<MapnikFilterExpression> expressions, MapnikFilterExpressionMathsOp op)
	{
		if (expressions.size() >= 2)
		{
			MapnikFilterExpression right = expressions.pop();
			MapnikFilterExpression left  = expressions.pop();

			if (left != null && right != null)
				expressions.push(new MapnikFilterExpressionMaths(op, left, right));
		}
	}

	public static void pushInt(Stack<MapnikFilterExpression> expressions, String val)
	{
		expressions.push(new MapnikFilterLiteral(new MapnikParameterIntValue(Integer.parseInt(val))));
	}

	public static void pushDouble(Stack<MapnikFilterExpression> expressions, String val)
	{
		expressions.push(new MapnikFilterLiteral(new MapnikParameterDoubleValue(Double.parseDouble(val))));
	}

	public static void pushString(Stack<MapnikFilterExpression> expressions, String val)
	{
		expressions.push(new MapnikFilterLiteral(new MapnikParameterStringValue(val.substring(1, val.length() - 1))));
	}

	public static void pushProperty(Stack<MapnikFilterExpression> expressions, String val)
	{
		expressions.push(new MapnikFilterProperty(val.substring(1, val.length() - 1)));
	}
}
PARSER_END(MapnikFilterParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}

TOKEN : /* and/or */
{
	< DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|	< DECIMAL_FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >
|   < LETTER: [         "A"-"Z",         "a"-"z" ] >|	< STRING_LITERAL:      "'"      (   (~["\"","\\","\n","\r"])        | ("\\"            ( ["n","t","b","r","f","\\","'","\""]            | ["0"-"7"] ( ["0"-"7"] )?            | ["0"-"3"] ["0"-"7"] ["0"-"7"]            )          )      )*      "'" >|  	< PROPERTY: "[" (<LETTER> | "_" | ":")+ "]">
}

int one_line() : {}
{
  filter_statement() { return 0; }
| ";"	    { return 1; }
}

void filter_statement() : {}
{
	or_expr() ";"
}

void property(): {}
{
	<PROPERTY> { pushProperty(mExpressions, token.toString()); }
}

void string() : {}
{
	<STRING_LITERAL> { pushString(mExpressions, token.toString()); }
}

void number() : {}
{
    <DECIMAL_FLOATING_POINT_LITERAL> { pushDouble(mExpressions, token.toString()); }
|   <DECIMAL_LITERAL> { pushInt(mExpressions, token.toString()); }
}

void literal() : {}
{
	number() | string() | property()
}

void function() : {}
{
	literal() | (("sqrt" | "sin" | "cos") "(" literal() ")") | ("min" | "max")"(" literal()","literal()")"
}

void factor() : {}
{
	function() | "(" or_expr() ")" | ("-" factor() ) 
}

void term() : {}
{
	factor() ( "*" factor() { composeExpression(mExpressions, new MapnikFilterExpressionMathsOpMultiply()); }
|              "/" factor() { composeExpression(mExpressions, new MapnikFilterExpressionMathsOpDivide()); } )
}

void expression() : {}
{
	term() ( "+" term() { composeExpression(mExpressions, new MapnikFilterExpressionMathsOpAdd()); }
|            "-" term() { composeExpression(mExpressions, new MapnikFilterExpressionMathsOpSub()); } )
}

void relation() : {}
{
	expression() ( ">=" expression() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpGreaterThanOrEqual()); }
|                  ">"  expression() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpGreaterThan()); }
|                  "<"  expression() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpLessThan()); }
|                  "<=" expression() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpGreaterThanOrEqual()); } )
}

void equation() : {}
{
    relation() ( "=" relation() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpEquals()); }
|                "<>" relation() { composeFilter(mFilters, mExpressions, new MapnikFilterCompareOpNotEquals()); } )
}

void not_expr() : {}
{
	equation() | "not" equation() { composeNotFilter(mFilters); }
}

void and_expr() : {}
{
	not_expr() "and" not_expr() { composeAndFilter(mFilters); }
}

void or_expr() : {}
{
    and_expr() "or" and_expr() { composeOrFilter(mFilters); } 
}







